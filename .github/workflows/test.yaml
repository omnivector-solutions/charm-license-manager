name: TestBuildDeployEdge
  
on: pull_request

jobs:
  lint-charms:
    name: "Lint the charms"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: "Install tox, run 'make lint'"
        run: | 
          pip install tox
          make lint
  build-charm:
    name: "Build the charms"
    needs: lint-charms
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: "Install charmcraft and build charms"
        run: |
          pip install charmcraft
          charmcraft build
      - name: Cache built charms
        if: ${{ success() }}
        id: license-manager-charm
        uses: actions/cache@v2
        with:
          path: |
            license-manager.charm
          key: license-manager-charm
  
  cache-juju-tar:
    name: "Cache juju tar for future jobs"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: "Pull juju creds from s3"
        if: steps.juju-tar.outputs.cache-hit != 'true'
        run: |
          aws s3 cp s3://omnivector-cicd/juju-local/juju-local.tar.gz .
          aws s3 cp s3://omnivector-private-assets/snaps/license-manager/edge/license-manager_0.1_amd64.snap .
          tar -xzvf juju-local.tar.gz
      - name: "Cache juju tar"
        if: ${{ success() }}
        id: juju-tar
        uses: actions/cache@v2
        with:
          path: |
            .local/share/juju
            license-manager_0.1_amd64.snap
          key: juju-tar
  
  deploy-focal-on-aws:
    name: "Deploy focal on aws"
    runs-on: "ubuntu-latest"
    needs: [cache-juju-tar, build-charm]
    steps:
      - uses: actions/checkout@v2
      - name: "Store commit sha for later use"
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: "Restore cached juju tar"
        uses: actions/cache@v2
        with:
          path: |
            .local/share/juju
            license-manager_0.1_amd64.snap
          key: juju-tar

      - name: "Restore built charms"
        uses: actions/cache@v2
        with:
          path: |
            license-manager.charm
          key: license-manager-charm

      - name: "Set JUJU_DATA to GITHUB_ENV"
        run: |
          echo "JUJU_DATA=/home/runner/work/charm-license-manager/charm-license-manager/.local/share/juju" >> $GITHUB_ENV
      - name: "Install juju"
        run: | 
          sudo snap install juju --classic
      - name: "Login to juju controller as cicd user"
        run: |
          echo ${{secrets.JUJU_CIRCLECI_USER_PASSWORD}} | juju login --user circleci
      - name: "Add model to house charms for testing"
        if: ${{ success() }}
        run: |
          juju add-model ${{ steps.vars.outputs.sha_short }}-focal
          juju add-space -m ${{ steps.vars.outputs.sha_short }}-focal nat 172.31.90.0/24 172.31.91.0/24 172.31.92.0/24 172.31.93.0/24
          juju model-config logging-config="<root>=DEBUG;<unit>=DEBUG"
      - name: "Deploy jobbergate and ubuntu"
        if: ${{ success() }}
        shell: bash
        run: |
          ls -la
          pwd
          juju deploy ubuntu --series focal --bind nat
          juju deploy ./license-manager.charm --resource license-manager=./license-manager_0.1_amd64.snap --series focal --bind nat
          juju relate ubuntu license-manager
      - name: "Wait for deployment to settle"
        if: ${{ success() }}
        run: |
          sudo snap install juju-wait --classic
          juju-wait
      - name: "Remove applications from juju model"
        if: ${{ always() }}
        run: |
          juju remove-application ubuntu
          juju remove-application license-manager
      - name: "Grab the slurm logs"
        if: ${{ always() }}
        run: |
          juju debug-log --replay --include license-manager > license-focal.txt
      - name: "Upload slurm charm logs"
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: license-manager-logs
          path: |
            license-focal.txt
      - name: "Destroy the model"
        if: ${{ always() }}
        run: |
          juju destroy-model -y ${{ steps.vars.outputs.sha_short }}-focal --force
